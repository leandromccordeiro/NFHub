---
description: 
globs: 
alwaysApply: true
---
## üß† Cursor Rules para Projetos Laravel + Blade + Bootstrap

### üîß PHP / Laravel Rules

1. Sempre aplicar o padr√£o PSR-12 ao gerar ou refatorar c√≥digo PHP.
2. Preferir controllers do tipo `resource` sempre que poss√≠vel.
3. Criar classes de Form Request separadas para valida√ß√µes em controllers.
4. Usar `Route::resource()` para rotas REST.
5. Nomear m√©todos seguindo o padr√£o REST (index, store, update, destroy, etc).
6. Adicionar tipagem em todos os m√©todos p√∫blicos.
7. Utilizar o helper `__()` para strings que podem ser traduzidas.
8. Evitar l√≥gica complexa nas views. Delegar para o controller ou view model.

---

### üìù Blade Rules

1. Associar arquivos `.blade.php` ao modo HTML e Emmet para autocompletar correto.
2. Sempre usar `@extends`, `@section`, `@yield` e `@include` para organiza√ß√£o.
3. Utilizar componentes Blade (`<x-*>`) para elementos reutiliz√°veis.
4. Separar formul√°rios em partials Blade (`_form.blade.php`).
5. Manter indenta√ß√£o de 4 espa√ßos e HTML limpo.
6. Usar `@csrf` e `@method` corretamente em formul√°rios.
7. Adotar `@props` em componentes personalizados.

---

### üé® Bootstrap Rules

1. Utilizar classes utilit√°rias como `mb-3`, `p-2`, `text-center` ao inv√©s de CSS customizado.
2. Preferir estrutura com `container`, `row`, `col-*` para layout responsivo.
3. Utilizar componentes Bootstrap sempre que poss√≠vel: alert, modal, card, etc.
4. Usar formul√°rios Bootstrap com `form-group`, `form-control`, `btn`, etc.
5. Evitar duplicar estilos inline; usar classes utilit√°rias para consist√™ncia.
6. Usar √≠cones de biblioteca (como Bootstrap Icons ou FontAwesome) com sem√¢ntica.

---

### üí° Extras para Efici√™ncia no Cursor

1. Sugira nome de arquivos e pastas seguindo conven√ß√£o Laravel (ex: `UserController`, `create.blade.php`).
2. Ao gerar CRUDs, crie: migration, model, factory, seeder, controller e views.
3. Incluir breadcrumbs e navega√ß√£o b√°sica no layout principal.
4. Padronizar nome de rotas usando `route('despesas.index')`, etc.
5. Gerar views com estrutura Bootstrap pronta (container, rows, cards, etc).
6. Sempre que poss√≠vel, sugerir testes unit√°rios ou de feature junto ao c√≥digo gerado.

